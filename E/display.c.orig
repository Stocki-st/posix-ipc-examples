#include <stdio.h>
#include <fcntl.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>
#include <sys/shm.h>
#include <sys/mman.h>
#include <semaphore.h>
#include "share.h"

int main(int argc, char** argv)
{
    char line[MAX_MSG_LEN+1] = {0};

    printf("try to open shared mem '%s'\n",SHAREDMEM_NAME);

    int fd = shm_open(SHAREDMEM_NAME, O_RDWR,0);
    if(fd == -1) {
        perror(SHAREDMEM_NAME);
        return 1;
    }
    printf("shm opened");
    if(ftruncate(fd, sizeof(struct shared_msg)) == -1) {
        perror(SHAREDMEM_NAME);
        close(fd);
        ///TODO: delete fd
        return 1;
    }
    printf("truncate done");

    struct shared_msg* shm = mmap(NULL, sizeof(struct shared_msg),PROT_READ, MAP_SHARED, fd, 0);
    printf("mmap done");

    sem_t* sem_sync = sem_open(SHM_SEM_SYNC, O_RDWR);
    if(sem_sync == SEM_FAILED) {
        perror(SHM_SEM_SYNC);
        if(munmap(shm,sizeof(struct shared_msg)) == -1) {
            perror(SHAREDMEM_NAME);
        }
        close(fd);
        return 1;
    }

    sem_t* sem_new_msg = sem_open(SHM_SEM_NEW_MSG, O_RDWR);
    if(sem_new_msg == SEM_FAILED) {
        perror(SHM_SEM_NEW_MSG);
        if(munmap(shm,sizeof(struct shared_msg)) == -1) {
            perror(SHAREDMEM_NAME);
        }
        sem_close(sem_sync);
        close(fd);
        return 1;
    }



    unsigned char length = 0;

    while (1) {
                    sem_wait(sem_new_msg);

        {
            /*
            * Critical section
            */
            sem_wait(sem_sync);
            //read from shared mem
            memcpy(line, shm->msg,MAX_MSG_LEN);
            length = shm->length;
            sem_post(sem_sync);
        }
        
        if(strcmp(line,"quit") == 0) {
            break;
        }

        printf("len: %ld, msg: '%s'\n",  line);
    }

    printf("done...\n");
    munmap(shm, sizeof(struct shared_msg));
    close(fd);
    sem_close(sem_sync);
    sem_close(sem_new_msg);
    sem_unlink(sem_sync);
    sem_unlink(sem_new_msg);
    shm_unlink(SHAREDMEM_NAME);
    return 0;
}
